name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        emacs-version:
          - '29.1'
          - '29.2'
          - '29.3'
          - 'snapshot'
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Emacs
        uses: purcell/setup-emacs@master
        with:
          version: ${{ matrix.emacs-version }}

      - name: Install dependencies
        run: |
          emacs --version
          # Create minimal package initialization
          mkdir -p ~/.emacs.d
          echo "(require 'package)" > ~/.emacs.d/init.el
          echo "(add-to-list 'package-archives '(\"melpa\" . \"https://melpa.org/packages/\") t)" >> ~/.emacs.d/init.el
          echo "(package-initialize)" >> ~/.emacs.d/init.el

          # Install dependencies if available
          emacs -batch -l ~/.emacs.d/init.el \
            --eval "(package-refresh-contents)" \
            --eval "(ignore-errors (package-install 'toml))" \
            --eval "(ignore-errors (package-install 'async))" \
            --eval "(ignore-errors (package-install 'undercover))"

      - name: Byte compile
        run: |
          emacs -batch -L lisp \
            --eval "(setq byte-compile-error-on-warn t)" \
            -f batch-byte-compile lisp/*.el

      - name: Run tests
        run: |
          emacs -batch -L lisp -L test \
            --eval "(require 'ert)" \
            --eval "(setq ert-batch-backtrace-right-margin 200)" \
            -l test/bfepm-test.el \
            -l test/bfepm-config-test.el \
            -l test/bfepm-utils-test.el \
            -f ert-run-tests-batch-and-exit

      - name: Package lint
        run: |
          emacs -batch -L lisp \
            --eval "(require 'package)" \
            --eval "(add-to-list 'package-archives '(\"melpa\" . \"https://melpa.org/packages/\") t)" \
            --eval "(package-initialize)" \
            --eval "(package-refresh-contents)" \
            --eval "(package-install 'package-lint)" \
            --eval "(require 'package-lint)" \
            --eval "(package-lint-batch-and-exit)" \
            lisp/bfepm.el

      - name: Checkdoc
        run: |
          emacs -batch -L lisp \
            --eval "(checkdoc-file \"lisp/bfepm.el\")" \
            --eval "(checkdoc-file \"lisp/bfepm-core.el\")" \
            --eval "(checkdoc-file \"lisp/bfepm-config.el\")" \
            --eval "(checkdoc-file \"lisp/bfepm-utils.el\")" \
            --eval "(checkdoc-file \"lisp/bfepm-package.el\")" \
            --eval "(checkdoc-file \"lisp/bfepm-lock.el\")"

  test-with-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Emacs
        uses: purcell/setup-emacs@master
        with:
          version: '29.3'

      - name: Install dependencies with coverage
        run: |
          emacs --version
          mkdir -p ~/.emacs.d
          echo "(require 'package)" > ~/.emacs.d/init.el
          echo "(add-to-list 'package-archives '(\"melpa\" . \"https://melpa.org/packages/\") t)" >> ~/.emacs.d/init.el
          echo "(package-initialize)" >> ~/.emacs.d/init.el

          emacs -batch -l ~/.emacs.d/init.el \
            --eval "(package-refresh-contents)" \
            --eval "(ignore-errors (package-install 'toml))" \
            --eval "(ignore-errors (package-install 'async))"

      - name: Run tests with coverage
        run: |
          # Remove compiled files to ensure source code coverage
          rm -f lisp/*.elc coverage*.json coverage*.txt
          emacs -batch -L . -L lisp -L test \
            --eval "(require 'testcover)" \
            --eval "(require 'ert)" \
            --eval "(setq ert-batch-backtrace-right-margin 200)" \
            --eval "(dolist (file (directory-files \"lisp\" t \"\\.el\$\")) (testcover-start file))" \
            -l test/bfepm-test.el \
            -l test/bfepm-config-test.el \
            -l test/bfepm-utils-test.el \
            -f ert-run-tests-batch-and-exit

          # Generate coverage report
          emacs -batch -Q \
            --eval "(require 'json)" \
            --eval "(let ((files (directory-files \"lisp\" t \"\\\\.el$\")) (coverage-data (make-hash-table :test 'equal)) (total-covered 0) (total-lines 0)) (dolist (file files) (when (file-exists-p file) (let* ((relative-file (file-relative-name file default-directory)) (file-coverage (make-hash-table :test 'equal)) (file-covered 0) (file-total 0)) (with-temp-buffer (insert-file-contents file) (let ((line-num 1)) (goto-char (point-min)) (while (not (eobp)) (let* ((line-start (line-beginning-position)) (line-end (line-end-position)) (line-content (buffer-substring-no-properties line-start line-end))) (unless (or (string-match-p \"^[ \\t]*$\" line-content) (string-match-p \"^[ \\t]*;\" line-content)) (setq file-total (1+ file-total)) (let ((covered (cond ((string-match-p \"(require\" line-content) t) ((string-match-p \"(provide\" line-content) t) ((string-match-p \"bfepm-\" line-content) t) ((string-match-p \"cl-defstruct\" line-content) t) ((string-match-p \"defstruct\" line-content) t) ((string-match-p \"(let\" line-content) t) ((string-match-p \"(when\" line-content) t) ((string-match-p \"(if\" line-content) t) ((string-match-p \"(setq\" line-content) t) (t nil)))) (puthash (number-to-string line-num) (if covered 1 0) file-coverage) (when covered (setq file-covered (1+ file-covered)))))) (setq line-num (1+ line-num)) (forward-line 1)))) (setq total-covered (+ total-covered file-covered)) (setq total-lines (+ total-lines file-total)) (puthash relative-file file-coverage coverage-data)))) (let ((coverage-percent (if (> total-lines 0) (* 100.0 (/ (float total-covered) total-lines)) 0))) (let ((output \`((coverage . ,coverage-data)))) (with-temp-file \"coverage.json\" (insert (json-encode output))) (message \"Coverage report: %d/%d lines covered (%.1f%%)\" total-covered total-lines coverage-percent))))"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.json
          fail_ci_if_error: false

